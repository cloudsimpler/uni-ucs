type tempType = {
	type : string;
	obj : UTSJSONObject;
	any : any;
	array : any[]
}

export function getDeepProperty(obj : any, path : string) : any {
	// 将路径字符串分割成数组
	const keys = path.split('.');
	let temp : tempType = {
		type: "string",
		obj: {},
		any: "",
		array: []
	};

	try {
		temp.obj = obj as UTSJSONObject
	} catch (e) {
		temp.array = obj as any[]
	};

	keys.forEach(element => {
		const type = typeof temp.obj[element];

		if (type == "object") {
			/**
			 * 因为array在typeof识别类型为object
			 * 所以同时在这里进行处理，array类型在异常处理中赋值
			 */
			try {
				if (element.indexOf("[") != -1 && element.indexOf("]") != -1) {
					const str = element.replace("[", "").replace("]", "");
					if (typeof temp.array[parseFloat(str)] == "object") {
						temp.obj = temp.array[parseFloat(str)] as UTSJSONObject;
						temp.type = "obj";
					} else {
						temp.any = temp.array[parseFloat(str)] as any;
						temp.type = "any";
					};
				} else {
					temp.obj = temp.obj[element] as UTSJSONObject;
					temp.type = "obj";
				};
			} catch (e) {
				temp.array = temp.obj[element] as any[];
				temp.type = "array";
			};
		} else {
			// string,Int,Double,number
			temp.any = temp.obj[element] as any;
			temp.type = "any";
		};
	});

	return temp[temp.type] as any
}